name: üöÄ Despliegue de Angular on push

on:
  push:
    branches:
      - main # El flujo se ejecuta en cada push a la rama main

jobs:
  web-deploy:
    name: üéâ Despliegue
    runs-on: ubuntu-latest # Utiliza la √∫ltima versi√≥n de Ubuntu para la ejecuci√≥n

    steps:
      # Paso 1: Obtener el c√≥digo m√°s reciente del repositorio
      - name: üöö Obtener el c√≥digo m√°s reciente
        uses: actions/checkout@v4

      # Paso 3: Configurar Node.js
      - name: üîß Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.14.0" # Versi√≥n espec√≠fica de Node.js

      # Paso 4: Instalar dependencias y construir el proyecto en modo producci√≥n
      - name: üîß Instalar dependencias y construir el proyecto
        run: |
          npm ci --omit=dev # Instalaci√≥n solo de dependencias necesarias para producci√≥n
          npx ng build --configuration=production # Construcci√≥n del proyecto Angular

      # Paso 5: Crear el archivo .htaccess con configuraciones de Apache y PHP
      - name: üõ†Ô∏è Crear archivo .htaccess
        run: |
          cat <<EOF > ./dist/angular-19-app/browser/.htaccess
          # Configuraci√≥n para redirecci√≥n en Angular usando mod_rewrite
          <IfModule mod_rewrite.c>
            RewriteEngine On
            RewriteBase /

            # Redirige todas las solicitudes a index.html, excepto archivos o directorios existentes
            RewriteCond %{REQUEST_FILENAME} !-f
            RewriteCond %{REQUEST_FILENAME} !-d
            RewriteRule ^.*$ index.html [L]
          </IfModule>

          # Configuraci√≥n de valores PHP personalizados
          <IfModule mod_php.c>
            php_value post_max_size 256M # Tama√±o m√°ximo para datos POST
            php_value upload_max_filesize 256M # Tama√±o m√°ximo para archivos subidos
            php_value max_execution_time 300 # Tiempo m√°ximo de ejecuci√≥n de un script en segundos
          </IfModule>

      # Paso 6: Verificar si el archivo .htaccess se cre√≥ correctamente
      - name: ‚úÖ Verificar archivo .htaccess
        run: |
          if [ -f ./dist/angular-19-app/browser/.htaccess ]; then
            echo ".htaccess creado correctamente"
          else
            echo "‚ö†Ô∏è Error: .htaccess no se cre√≥ correctamente" && exit 1
          fi

      # Paso 7: Verificar el contenido de la build antes de desplegar
      - name: üîç Verificar contenido de la build
        run: ls -la ./dist/angular-19-app/browser/

      # Paso 8: Sincronizar archivos por FTP al servidor
      - name: üìÇ Sincronizar archivos por FTP
        uses: SamKirkland/FTP-Deploy-Action@4.3.3
        with:
          server: dev.imaarica.cl
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./dist/angular-19-app/browser/
          server-dir: ./public_html/
          dangerous-clean-slate: true # Limpieza completa antes de subir

      # Paso 9: Notificar despliegue exitoso
      - name: ‚úÖ Notificar despliegue exitoso
        if: success()
        run: echo "El despliegue fue exitoso üöÄ"

      # Paso 10: Notificar error en el despliegue
      - name: üö® Notificar error en el despliegue
        if: failure()
        run: echo "El despliegue ha fallado üò¢"        

      # üîÑ Activar las extensiones PHP
      # Si tu servidor es administrado (como en un hosting compartido), las opciones son:
      #
      # 1. Contactar al proveedor: Solicita que activen las extensiones necesarias.
      #
      # 2. Usar php.ini: Si te permiten usar un archivo php.ini personalizado, puedes intentar agregar:
      #
      # extension=mbstring
      # extension=intl
      # extension=bcmath
      # extension=pdo
      # extension=pdo_mysql
      #
      # Nota: La habilitaci√≥n de extensiones PHP depende del entorno del servidor.
